generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  name          String?
  subscribed    Boolean?      @default(false)
  accounts      Account[]
  dailySummaries DailySummary[]
  bookmarks     Bookmark[]
  responses     GPTResponse[]
  sessions      Session[]
  languagePreference UserLanguagePreference?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Language {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., "ja", "ko", "es", "ar"
  name        String   // e.g., "Japanese", "Korean", "Spanish", "Arabic"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  responses   GPTResponse[]
  bookmarks   Bookmark[]
  dailySummaries DailySummary[]
  userPreferences UserLanguagePreference[]
}

model UserLanguagePreference {
  id          String   @id @default(cuid())
  userId      String   @unique
  languageId  String
  updatedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  language    Language @relation(fields: [languageId], references: [id])
}

model GPTResponse {
  id          String     @id @default(cuid())
  content     String
  createdAt   DateTime   @default(now())
  userId      String
  languageId  String
  rank        Int?       @default(1)
  user        User       @relation(fields: [userId], references: [id])
  language    Language   @relation(fields: [languageId], references: [id])
  bookmarks   Bookmark[] @relation("BookmarksToResponses")
  dailySummaries DailySummary[] @relation("DailySummaryToResponses")
}

model Bookmark {
  id          String     @id @default(cuid())
  title       String
  userId      String
  languageId  String
  isReserved  Boolean    @default(false)  // For "all responses" and "daily summary"
  user        User       @relation(fields: [userId], references: [id])
  language    Language   @relation(fields: [languageId], references: [id])
  responses   GPTResponse[] @relation("BookmarksToResponses")
}

model DailySummary {
  id          String     @id @default(cuid())
  userId      String
  languageId  String
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  language    Language   @relation(fields: [languageId], references: [id])
  responses   GPTResponse[] @relation("DailySummaryToResponses")
}
