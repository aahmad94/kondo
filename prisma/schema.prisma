generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                  @id @default(cuid())
  email              String?                 @unique
  emailVerified      DateTime?
  image              String?
  name               String?
  subscribed         Boolean?                @default(false)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  accounts           Account[]
  bookmarks          Bookmark[]
  dailySummaries     DailySummary[]
  responses          GPTResponse[]
  sessions           Session[]
  languagePreference UserLanguagePreference?
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Language {
  id              String                   @id @default(cuid())
  code            String                   @unique
  name            String
  isActive        Boolean                  @default(true)
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  bookmarks       Bookmark[]
  dailySummaries  DailySummary[]
  responses       GPTResponse[]
  userPreferences UserLanguagePreference[]
}

model UserLanguagePreference {
  id         String   @id @default(cuid())
  userId     String   @unique
  languageId String
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  language   Language @relation(fields: [languageId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GPTResponse {
  id                String         @id @default(cuid())
  content           String
  createdAt         DateTime       @default(now())
  userId            String
  rank              Int?           @default(1)
  languageId        String
  isPaused          Boolean        @default(false)
  isFuriganaEnabled Boolean        @default(false)
  updatedAt         DateTime       @updatedAt
  audio             String?
  audioMimeType     String?
  breakdown         String?
  furigana          String?
  language          Language       @relation(fields: [languageId], references: [id])
  user              User           @relation(fields: [userId], references: [id])
  bookmarks         Bookmark[]     @relation("BookmarksToResponses")
  dailySummaries    DailySummary[] @relation("DailySummaryToResponses")
}

model Bookmark {
  id         String        @id @default(cuid())
  title      String
  userId     String
  languageId String
  isReserved Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  language   Language      @relation(fields: [languageId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
  responses  GPTResponse[] @relation("BookmarksToResponses")
}

model DailySummary {
  id         String        @id @default(cuid())
  userId     String
  languageId String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  language   Language      @relation(fields: [languageId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
  responses  GPTResponse[] @relation("DailySummaryToResponses")
}
