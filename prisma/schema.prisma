generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  name           String?
  subscribed     Boolean        @default(false)
  accounts       Account[]
  bookmarks      Bookmark[]
  dailySummaries DailySummary[]
  responses      GPTResponse[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GPTResponse {
  id        String     @id @default(cuid())
  content   String
  createdAt DateTime   @default(now())
  userId    String
  rank      Int        @default(1)
  user      User       @relation(fields: [userId], references: [id])
  bookmarks Bookmark[] @relation("BookmarksToResponses")
}

model Bookmark {
  id        String        @id @default(cuid())
  title     String
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  responses GPTResponse[] @relation("BookmarksToResponses")
}

model DailySummary {
  id          String   @id @default(cuid())
  userId      String
  responseIds String[]
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}
