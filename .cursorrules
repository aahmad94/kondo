# Project Overview: Kondo - Language Learning App
This is a Next.js app for language learning with features like GPT responses, bookmarks, breakdowns, and multilingual support (e.g., Japanese furigana, Spanish, Arabic). It uses a mix of Pages Router and App Router but is migrating fully to App Router with server actions for data handling. Stick strictly to the existing file structure unless explicitly instructed otherwise.

# File Structure Rules
- Maintain the exact directory structure:
  - Core app logic in `/app/` (e.g., components in `/app/components/`, hooks in `/app/hooks/`, contexts in `/app/contexts/`).
  - API routes in `/app/api/` for App Router (e.g., `/app/api/breakdown/route.ts`).
  - Legacy Pages Router in `/pages/` (e.g., `/pages/api/auth/[...nextauth].ts`), but prefer migrating to App Router equivalents.
  - Services in `/lib/` organized by domain:
    - `/lib/gpt/` (GPTResponseService.ts, summaryService.ts) - AI and GPT functionality
    - `/lib/bookmarks/` (bookmarkService.ts, bookmarkClientService.ts) - Bookmark management
    - `/lib/user/` (userService.ts, languageService.ts) - User preferences and settings  
    - `/lib/utils/` (audioUtils.ts, expressionUtils.ts, furiganaService.ts) - Utility functions
    - `/lib/analytics/` (amplitudeService.ts) - Tracking and analytics
    - `/lib/database/` (prisma.ts, searchService.ts) - Database access layer
  - Prompts in `/prompts/` (e.g., `ja_gpt_prompt.txt` for Japanese).
  - Database in `/prisma/` (use Prisma client from `/lib/database/prisma.ts`).
  - Scripts in `/scripts/`, types in `/types/`, public assets in `/public/assets/`.
- Do not create new directories or move files without confirmation. For new features, suggest placements like: UI components in `/app/components/`, services in `/lib/`.

# Routing and Architecture Rules
- Prefer App Router for all new routes and features (e.g., use `/app/page.tsx` for home, server actions in route handlers).
- Migrate Pages Router endpoints (e.g., `/pages/api/createBookmark.ts`) to App Router when possible, using server actions for mutations (e.g., in `/app/api/bookmarks/route.ts`).
- Use server components by default; only add 'use client' for interactive client-side needs (e.g., in `ChatBox.tsx`).
- For data fetching/mutations: Use server actions exported from domain services in `/lib/` (e.g., integrate with Prisma in `/lib/database/prisma.ts`, bookmark operations in `/lib/bookmarks/bookmarkService.ts`).
- Components: Functional with TypeScript props (interfaces preferred). Use named exports, e.g., `export function GPTResponse() {}`.

# Coding Standards
- Language: TypeScript everywhere; reference types from `/types/`.
- Styling: Tailwind CSS from `tailwind.config.ts`; apply classes inline, no custom CSS unless in `globals.css`.
- Imports: Use path mapping (@/lib/domain) over relative paths; prefer domain-specific imports for clarity:
  - `import { extractExpressions } from '@/lib/utils'`
  - `import { trackLanguageChange } from '@/lib/analytics'` 
  - `import { createGPTResponse } from '@/lib/gpt'`
  - Group imports: Next.js/React first, then third-party, then local (@/lib imports).
- Error Handling: Use guard clauses and early returns; integrate with `ErrorModal.tsx`.
- Performance: Lazy load non-critical components; optimize audio with `/lib/utils/audioUtils.ts`.
- Testing: Suggest unit tests in `/lib/tests/` for services; use Jest or similar.

# AI-Specific Rules
- For language features: Use prompts from `/prompts/` (e.g., load `ja_gpt_breakdown_prompt.txt` for Japanese breakdowns).
- When generating GPT-related code, reference `/lib/gpt/GPTResponseService.ts` and components like `GPTResponse.tsx`.

# Workflow Rules
- After implementing a feature, fixing a bug, or editing code, suggest a commit message in Conventional Commits format (e.g., 'feat: implement bookmark editing in App Router', 'fix: resolve furigana toggle in LanguageSelector.tsx'). Keep messages under 60 characters.
- If code involves migration (e.g., Pages to App Router), highlight changes and suggest tests.

# Examples
- New component: Place in `/app/components/`, e.g.: